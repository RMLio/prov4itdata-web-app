openapi: 3.0.0
info:
  title: PROV4ITDaTa-DAPSI API
  description: Transfer your personal data from multiple data providers to your Solid Pod.
  version: 0.1.1
servers:
  - url: http://localhost:4000/
    description: Optional server description, e.g. Main (production) server

paths:
  /imgur/callback:
    get:
      summary: Updates imgur tokens and redirects back to root

  /flickr/callback:
    get:
      summary: Updates flickr tokens and redirects back to root

  /rml/rules/{provider}/{filename}: # note: will be removed
    get:
      summary: Returns the contents of the mapping for the given provider and filename
      parameters:
        - name: provider
          in: path
          description: Data provider (e.g. flickr)
          required: true
          schema:
            type: string
        - name: filename
          in: path
          description: Filename of the RML Mapping file
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: '
                @prefix ex: <http://example.com/> .
                @prefix foaf: <http://xmlns.com/foaf/0.1/> .

                ex:me foaf:knows ex:you .
                '
  /rmlmapper/{provider}/{filename}:
    get: # TODO: will change to POST
      summary: Returns the result returned by the RMLMapper.
      For this, the token-controller is used to access the provider credentials, based on the provided request and provider.
      Subsecuently, the rml-rules-controller will make call to the RMLMapper WEB API to execute the mapping.
      parameters:
        - name: provider
            in: path
            description: Data provider (e.g. flickr)
            required: true
            schema:
              type: string
        - name: filename
          in: path
          description: Filename of the RML Mapping file
          required: true
          schema:
            type: string

      responses:
        200:
          description: The specific RML mapping has been executed succesfully and the resulting generated RDF and provenance are being returned.
          content:
            application/json:
              schema:
                $ref: '' #TODO: construct van { 'rdf' : '.....' , 'prov': '....' }

  /status/{provider}/connectede:
    get:
      summary: Returns whether the given provider is connected (i.e. whether the backend contains tokens for that provider.
      parameters:
        parameters:
          - name: provider
              in: path
              description: Data provider (e.g. flickr)
              required: true
              schema:
                type: string
        responses:
          200:
            description: Returns true or false, depending on whether the given provider is connected.
            content:
              boolean:
                schema: # schema.org#Boolean?
                  $ref: ''  # TODO